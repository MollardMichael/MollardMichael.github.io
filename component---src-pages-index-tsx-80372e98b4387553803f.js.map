{"version":3,"file":"component---src-pages-index-tsx-80372e98b4387553803f.js","mappings":"2KAee,SAASA,EAAY,GASzB,IARTC,EAAE,EAAFA,GACAC,EAAK,EAALA,MACAC,EAAK,EAALA,MACAC,EAAI,EAAJA,KACAC,EAAO,EAAPA,QACAC,EAAc,EAAdA,eACAC,EAAI,EAAJA,KACAC,EAAI,EAAJA,KAQA,OACEC,EAAAA,cAAAA,MAAAA,CAAKC,MAPuC,CAAC,EAOfC,IAAKV,GAChCC,EACCO,EAAAA,cAACG,EAAAA,EAAG,CAACC,MAAOX,EAAOY,IAAI,uBAEvBL,EAAAA,cAAAA,MAAAA,CACEC,MAAO,CAAEK,SAAU,SACnBC,IAAKV,EACLQ,IAAI,uBAGRL,EAAAA,cAACQ,EAAAA,KAAI,CAACP,MAAO,CAAEQ,MAAO,SAAWC,GAAIX,GACnCC,EAAAA,cAAAA,KAAAA,KAAKN,IAEPM,EAAAA,cAAAA,KAAAA,KAAKL,GACLK,EAAAA,cAAAA,MAAAA,KAAMJ,GACNI,EAAAA,cAAAA,MAAAA,CAAKC,MApBoC,CAC3CU,UAAW,QAoBNb,GACCA,EAAKc,KAAI,SAACC,EAAaC,GAAa,OAClCd,EAAAA,cAAAA,OAAAA,CACEC,MAAK,eACHc,QAAS,WACK,IAAVD,EAAc,CAAEE,YAAa,KAAQ,CAAC,GAE5Cd,IAAKW,GAAI,IAEPA,EACG,KAKnB,C,iICKA,UA5DkB,SAAH,IAAsBI,EAAAA,EAAAA,GAAAA,GACnC,IAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cAqC5B,OACEnB,EAAAA,cAACoB,EAAAA,EAAM,CAAC1B,MAAM,mBACZM,EAAAA,cAAAA,KAAAA,KAAAA,SACAA,EAAAA,cAAAA,MAAAA,CAAKC,MAVkC,CACzCoB,QAAS,OACTC,oBAAqB,2BACrBC,UAAW,MACXC,OAAQ,QAOHN,EAAKO,OAAOC,MAAMd,KAAI,kBAAGe,EAAI,EAAJA,KAAI,OAC5B3B,EAAAA,cAACT,EAAAA,EAAW,CACVC,GAAImC,EAAKnC,GACTK,eAAgB8B,EAAKC,YAAYnC,MAAMoC,UACvCpC,MAA6C,QAAxC,EAAEkC,EAAKC,YAAYnC,MAAMqC,uBAAe,aAAtCC,EAAwC3B,MAC/CV,MAAOiC,EAAKC,YAAYlC,MACxBC,KAAMgC,EAAKC,YAAYI,KACvBpC,QAAS+B,EAAK/B,QACdE,KAAM6B,EAAKC,YAAY9B,KACvBC,KAAM4B,EAAKC,YAAY7B,KACvBG,IAAKyB,EAAKnC,IACV,KAKZ,EAIO,IAAMyC,EAAe,WAAH,OAASjC,EAAAA,cAACkC,EAAAA,EAAG,CAACxC,MAAM,2BAAgC,C,uBCtE9D,SAASuB,EAA0BkB,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,+BACvC,C","sources":["webpack://homepage/./src/components/ProjectCard.tsx","webpack://homepage/./src/pages/index.tsx","webpack://homepage/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import React from \"react\";\nimport Img, { FluidObject } from \"gatsby-image\";\nimport { Link } from \"gatsby\";\n\ntype Props = {\n  id: string;\n  imagePublicURL: string;\n  image?: FluidObject;\n  title: string;\n  year: string;\n  excerpt: string;\n  path: string;\n  tags: string[];\n};\n\nexport default function ProjectCard({\n  id,\n  image,\n  title,\n  year,\n  excerpt,\n  imagePublicURL,\n  tags,\n  path,\n}: Props) {\n  const projectCardStyle: React.CSSProperties = {};\n\n  const tagWrapperStyle: React.CSSProperties = {\n    marginTop: \"2em\",\n  };\n\n  return (\n    <div style={projectCardStyle} key={id}>\n      {image ? (\n        <Img fluid={image} alt=\"Picture of project\" />\n      ) : (\n        <img\n          style={{ maxWidth: \"420px\" }}\n          src={imagePublicURL}\n          alt=\"Picture of project\"\n        />\n      )}\n      <Link style={{ color: \"black\" }} to={path}>\n        <h2>{title}</h2>\n      </Link>\n      <h3>{year}</h3>\n      <div>{excerpt}</div>\n      <div style={tagWrapperStyle}>\n        {tags &&\n          tags.map((tag: string, index: number) => (\n            <span\n              style={{\n                padding: \"0 0.3em\",\n                ...(index === 0 ? { paddingLeft: \"0\" } : {}),\n              }}\n              key={tag}\n            >\n              #{tag}\n            </span>\n          ))}\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { graphql, HeadFC, useStaticQuery } from \"gatsby\";\nimport Layout from \"../layouts/Layout\";\nimport { SEO } from \"../components/SEO\";\nimport ProjectCard from \"../components/ProjectCard\";\n\ntype IndexProp = {};\n\nconst IndexPage = ({}: IndexProp) => {\n  const data = useStaticQuery(graphql`\n    query MyProjects {\n      allMdx(filter: { frontmatter: { type: { eq: \"Work\" } } }) {\n        edges {\n          node {\n            id\n            tableOfContents\n            excerpt(pruneLength: 160)\n            body\n            frontmatter {\n              type\n              image {\n                publicURL\n                childImageSharp {\n                  fluid(maxWidth: 800) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n              tags\n              title\n              path\n              date(formatString: \"MMM YYYY\")\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const projectsStyle: React.CSSProperties = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(2, minmax(0,1fr))\",\n    columnGap: \"3em\",\n    rowGap: \"2em\",\n  };\n\n  return (\n    <Layout title=\"Michaël Mollard\">\n      <h1>Works</h1>\n      <div style={projectsStyle}>\n        {data.allMdx.edges.map(({ node }: any) => (\n          <ProjectCard\n            id={node.id}\n            imagePublicURL={node.frontmatter.image.publicURL}\n            image={node.frontmatter.image.childImageSharp?.fluid}\n            title={node.frontmatter.title}\n            year={node.frontmatter.date}\n            excerpt={node.excerpt}\n            tags={node.frontmatter.tags}\n            path={node.frontmatter.path}\n            key={node.id}\n          />\n        ))}\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <SEO title=\"Michaël Mollard's works\"></SEO>;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["ProjectCard","id","image","title","year","excerpt","imagePublicURL","tags","path","React","style","key","Img","fluid","alt","maxWidth","src","Link","color","to","marginTop","map","tag","index","padding","paddingLeft","_objectDestructuringEmpty","data","useStaticQuery","Layout","display","gridTemplateColumns","columnGap","rowGap","allMdx","edges","node","frontmatter","publicURL","childImageSharp","_node$frontmatter$ima","date","Head","SEO","obj","TypeError"],"sourceRoot":""}