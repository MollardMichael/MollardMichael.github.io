{"version":3,"file":"component---src-pages-blog-tsx-bae5943397239410b9a8.js","mappings":"2KAee,SAASA,EAAT,GASJ,IARTC,EAQQ,EARRA,GACAC,EAOQ,EAPRA,MACAC,EAMQ,EANRA,MACAC,EAKQ,EALRA,KACAC,EAIQ,EAJRA,QACAC,EAGQ,EAHRA,eACAC,EAEQ,EAFRA,KACAC,EACQ,EADRA,KAQA,OACEC,EAAAA,cAAAA,MAAAA,CAAKC,MAPuC,CAAC,EAOfC,IAAKV,GAChCC,EACCO,EAAAA,cAACG,EAAAA,EAAD,CAAKC,MAAOX,EAAOY,IAAI,uBAEvBL,EAAAA,cAAAA,MAAAA,CACEC,MAAO,CAAEK,SAAU,SACnBC,IAAKV,EACLQ,IAAI,uBAGRL,EAAAA,cAACQ,EAAAA,KAAD,CAAMP,MAAO,CAAEQ,MAAO,SAAWC,GAAIX,GACnCC,EAAAA,cAAAA,KAAAA,KAAKN,IAEPM,EAAAA,cAAAA,KAAAA,KAAKL,GACLK,EAAAA,cAAAA,MAAAA,KAAMJ,GACNI,EAAAA,cAAAA,MAAAA,CAAKC,MApBoC,CAC3CU,UAAW,QAoBNb,GACCA,EAAKc,KAAI,SAACC,EAAaC,GAAd,OACPd,EAAAA,cAAAA,OAAAA,CACEC,MAAK,eACHc,QAAS,WACK,IAAVD,EAAc,CAAEE,YAAa,KAAQ,CAAC,GAE5Cd,IAAKW,GALP,IAOIA,EARN,KAcT,C,iICKD,UA5DkB,SAAC,IAAkBI,EAAAA,EAAAA,GAAAA,GACnC,IAOMC,GAAOC,EAAAA,EAAAA,gBAAe,cA8B5B,OACEnB,EAAAA,cAACoB,EAAAA,EAAD,CAAQ1B,MAAM,aAAa2B,SAAS,sBAClCrB,EAAAA,cAAAA,KAAAA,KAAAA,QACAA,EAAAA,cAAAA,MAAAA,CAAKC,MAxCkC,CACzCqB,QAAS,OACTC,oBAAqB,2BACrBC,UAAW,MACXC,OAAQ,QAqCHP,EAAKQ,OAAOC,MAAMf,KAAI,kBAAGgB,EAAH,EAAGA,KAAH,OACrB5B,EAAAA,cAACT,EAAAA,EAAD,CACEC,GAAIoC,EAAKpC,GACTK,eAAgB+B,EAAKC,YAAYpC,MAAMqC,UACvCrC,MAAK,UAAEmC,EAAKC,YAAYpC,MAAMsC,uBAAzB,aAAEC,EAAwC5B,MAC/CV,MAAOkC,EAAKC,YAAYnC,MACxBC,KAAMiC,EAAKC,YAAYI,KACvBrC,QAASgC,EAAKhC,QACdE,KAAM8B,EAAKC,YAAY/B,KACvBC,KAAM6B,EAAKC,YAAY9B,KACvBG,IAAK0B,EAAKpC,IAVb,KA1CT,EA8DO,IAAM0C,EAAe,kBAAMlC,EAAAA,cAACmC,EAAAA,EAAD,CAAKzC,MAAM,0BAAtC,C,uBCtEQ,SAASuB,EAA0BmB,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,+BACvC,C","sources":["webpack://homepage/./src/components/ProjectCard.tsx","webpack://homepage/./src/pages/blog.tsx","webpack://homepage/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import React from \"react\";\nimport Img, { FluidObject } from \"gatsby-image\";\nimport { Link } from \"gatsby\";\n\ntype Props = {\n  id: string;\n  imagePublicURL: string;\n  image?: FluidObject;\n  title: string;\n  year: string;\n  excerpt: string;\n  path: string;\n  tags: string[];\n};\n\nexport default function ProjectCard({\n  id,\n  image,\n  title,\n  year,\n  excerpt,\n  imagePublicURL,\n  tags,\n  path,\n}: Props) {\n  const projectCardStyle: React.CSSProperties = {};\n\n  const tagWrapperStyle: React.CSSProperties = {\n    marginTop: \"2em\",\n  };\n\n  return (\n    <div style={projectCardStyle} key={id}>\n      {image ? (\n        <Img fluid={image} alt=\"Picture of project\" />\n      ) : (\n        <img\n          style={{ maxWidth: \"420px\" }}\n          src={imagePublicURL}\n          alt=\"Picture of project\"\n        />\n      )}\n      <Link style={{ color: \"black\" }} to={path}>\n        <h2>{title}</h2>\n      </Link>\n      <h3>{year}</h3>\n      <div>{excerpt}</div>\n      <div style={tagWrapperStyle}>\n        {tags &&\n          tags.map((tag: string, index: number) => (\n            <span\n              style={{\n                padding: \"0 0.3em\",\n                ...(index === 0 ? { paddingLeft: \"0\" } : {}),\n              }}\n              key={tag}\n            >\n              #{tag}\n            </span>\n          ))}\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { graphql, HeadFC, useStaticQuery } from \"gatsby\";\nimport Layout from \"../layouts/Layout\";\nimport { SEO } from \"../components/SEO\";\nimport ProjectCard from \"../components/ProjectCard\";\n\ntype IndexProp = {};\n\nconst IndexPage = ({}: IndexProp) => {\n  const projectsStyle: React.CSSProperties = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(2, minmax(0,1fr))\",\n    columnGap: \"3em\",\n    rowGap: \"2em\",\n  };\n\n  const data = useStaticQuery(graphql`\n    query MyBlogs {\n      allMdx(filter: { frontmatter: { type: { eq: \"Blog\" } } }) {\n        edges {\n          node {\n            id\n            tableOfContents\n            excerpt(pruneLength: 160)\n            body\n            frontmatter {\n              type\n              image {\n                publicURL\n                childImageSharp {\n                  fluid(maxWidth: 800) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n              tags\n              title\n              path\n              date(formatString: \"MMM YYYY\")\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <Layout title=\"Blog Posts\" subTitle=\"by Michaël Mollard\">\n      <h1>Blog</h1>\n      <div style={projectsStyle}>\n        {data.allMdx.edges.map(({ node }: any) => (\n          <ProjectCard\n            id={node.id}\n            imagePublicURL={node.frontmatter.image.publicURL}\n            image={node.frontmatter.image.childImageSharp?.fluid}\n            title={node.frontmatter.title}\n            year={node.frontmatter.date}\n            excerpt={node.excerpt}\n            tags={node.frontmatter.tags}\n            path={node.frontmatter.path}\n            key={node.id}\n          />\n        ))}\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <SEO title=\"Michaël Mollard's blog\"></SEO>;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["ProjectCard","id","image","title","year","excerpt","imagePublicURL","tags","path","React","style","key","Img","fluid","alt","maxWidth","src","Link","color","to","marginTop","map","tag","index","padding","paddingLeft","_objectDestructuringEmpty","data","useStaticQuery","Layout","subTitle","display","gridTemplateColumns","columnGap","rowGap","allMdx","edges","node","frontmatter","publicURL","childImageSharp","_node$frontmatter$ima","date","Head","SEO","obj","TypeError"],"sourceRoot":""}